/* Cafe 0.1.6 Wed Oct 23 2013 00:08:49 GMT+0300 (EEST) */

// Generated by CoffeeScript 1.6.3
(function() {
  "Simple common js bootstrapper.\nInspired by stitch.";
  var cache, diranme, expand, modules, partial, require;

  if (!this.require) {
    modules = {};
    cache = {};
    if (!window.bootstrapper) {
      window.bootstrapper = {};
    }
    window.bootstrapper.modules = modules;
    window.bootstrapper.cache = cache;
    partial = function(fn) {
      var partial_args;
      partial_args = Array.prototype.slice.call(arguments);
      partial_args.shift();
      return function() {
        var a, arg, i, new_args, _i, _len, _ref;
        _ref = [[], 0], new_args = _ref[0], arg = _ref[1];
        for (i = _i = 0, _len = partial_args.length; _i < _len; i = ++_i) {
          a = partial_args[i];
          if (partial_args[i] === void 0) {
            new_args.push(arguments[arg++]);
          } else {
            new_args.push(partial_args[i]);
          }
        }
        return fn.apply(this, new_args);
      };
    };
    require = function(name, root, ns) {
      var e, fn, module, ns_module, ns_path, path, top_level_module;
      if (name === 'bootstrapper') {
        return window.bootstrapper;
      }
      path = expand(root, name);
      ns_path = "" + ns + "/" + (expand('', name));
      top_level_module = modules[path] || modules[expand(path, './index')];
      if (ns && !top_level_module) {
        path = ns_path;
      }
      ns_module = modules[ns_path] || modules[expand(ns_path, './index')];
      if (ns && top_level_module && ns_module) {
        path = "" + ns + "/" + (expand('', name));
      }
      module = cache[path] || cache[expand(path, './index')];
      if (module) {
        return module.exports;
      } else if (fn = modules[path] || modules[path = expand(path, './index')]) {
        module = {
          id: path,
          exports: {}
        };
        try {
          cache[path] = module;
          fn(module.exports, module);
          return module.exports;
        } catch (_error) {
          e = _error;
          delete cache[path];
          throw e;
        }
      } else {
        throw "module '" + name + "' is not found";
      }
    };
    expand = function(root, name) {
      var i, part, parts, results, _i, _ref;
      results = [];
      if (/^\.\.?(\/|$)/.test(name)) {
        parts = [root, name].join('/').split('/');
      } else {
        parts = name.split('/');
      }
      for (i = _i = 0, _ref = parts.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        part = parts[i];
        if (part === '..') {
          results.pop();
        } else if (part !== '.' && part !== '') {
          results.push(part);
        }
      }
      return results.join('/');
    };
    diranme = function(path) {
      return path.split('/').slice(0).join('/');
    };
    this.require = function(name) {
      return require(name, '');
    };
    this.require.define = function(ns, bundle) {
      var key, value, _key, _require;
      _require = partial(require, void 0, void 0, ns);
      for (key in bundle) {
        value = bundle[key];
        _key = ns ? "" + ns + "/" + key : key;
        modules[_key] = partial(value, void 0, _require, void 0);
        void 0;
      }
      return void 0;
    };
  }

}).call(this);



/*ZB:  */
require.define('', {

/*ZB:  /module2 */
'module2': function(exports, require, module) {(function() {
(function() {
  var f2;

  f2 = function() {};

}).call(this);

}).call(this);}
});


/*ZB:  */
require.define('', {

/*ZB:  /module1 */
'module1': function(exports, require, module) {(function() {
(function() {
  var f;

  f = function() {};

}).call(this);

}).call(this);}
});