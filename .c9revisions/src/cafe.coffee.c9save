{"ts":1349206110083,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"\"\"\n    This is Cafe's main module.\n\"\"\"\nhead = [\n    \"\"\"\n    Cafe is the build system for client side applications (and more).\n    It is written in Coffescript in functional and asyncronous way.\n\n    This is a CLI UI for Cafe v.1\n\n    Parameters:\n        -- debug     - include stack traces and other debug info\n                       into output\n\n        -- nologo    - exclude logo from output, usefull for sub-commands;\n\n        -- nocolor   - do not use color in output, usefull\n                       when directing Cafe's output into a log file;\n\n        -- shutup    - exclude info and warning messages from output.\n                       Error and debug messages will be preserved;\n\n        -- version   - returns the current Cafe's version;\n\n        -- help      - this help.\n\n    Sub-commands:\n    \"\"\"\n]\n\nfs = require 'fs'\npath = require 'path'\nasync = require 'async'\nevents = require 'events'\nuuid = require 'node-uuid'\n\n{run_target} = require './lib/target'\n{trim, is_debug_context, get_plugins} = require './lib/utils'\n{say, shout, scream, whisper,\n murmur, shutup, panic_mode, nocolor} = (require './lib/logger')()\n{\n    VERSION\n\n    TARGET_PATH\n\n    EVENT_CAFE_DONE\n\n    EXIT_SUCCESS\n    EXIT_TARGET_ERROR\n    EXIT_OTHER_ERROR\n    EXIT_HELP\n    EXIT_SIGINT\n    EXIT_NO_STATUS_CODE\n    EXIT_SIGTERM\n    EXIT_PARTIAL_SUCCESS\n    EXIT_VERSION_MISMATCH\n} = require './defs'\n\n\nmodule.exports = ->\n    Target_path = TARGET_PATH\n    Emitter = new events.EventEmitter\n    START_TIME = undefined\n    ID = uuid.v4()\n\n    no_action_handler = (fb) ->\n        show_help_and_exit fb\n        #Emitter.emit EVENT_CAFE_DONE, EXIT_HELP\n\n    show_help_and_exit = (fb) ->\n        (head.concat (get_targets()).map (t) -> \"    #{t}\").map (l) -> fb.murmur l\n        Emitter.emit EVENT_CAFE_DONE, EXIT_HELP\n\n    show_version_and_exit = (fb) ->\n        fb.say \"Current version: #{get_version()}\"\n        Emitter.emit EVENT_CAFE_DONE, EXIT_HELP\n\n    target_run_factory = (target_name, full_args, proto_ctx) ->\n        (cb) ->\n            run_target target_name, full_args, proto_ctx, cb\n\n    ready = ({target_path, emitter, exit_cb, fb}) ->\n        Target_path = target_path if target_path\n        Emitter = emitter if emitter\n\n        proto_ctx =\n            emitter: Emitter\n            fb: fb\n\n        # the one and only exit point\n        Emitter.on EVENT_CAFE_DONE, (status) ->\n            say \"Coffee #{ID} brewed in <#{(new Date - START_TIME) / 1000} seconds> at #{new Date}\"\n            fb.say \"Coffee #{ID} brewed in <#{(new Date - START_TIME) / 1000} seconds> at #{new Date}\"\n            exit_cb (if status is undefined then EXIT_NO_STATUS_CODE else status)\n\n\n        # global entry point\n        go = ({args}) ->\n            cb = ->\n                if args.global?.hasOwnProperty 'help'\n                    show_help_and_exit fb\n\n                else if args.global?.hasOwnProperty 'version'\n                    show_version_and_exit fb\n\n                else\n                    seq = ((target_run_factory target, args, proto_ctx) \\\n                            for target of args when target isnt \"global\")\n\n                    if (seq.length is 0) then (no_action_handler fb) else (run_seq args, seq, fb)\n\n            # making updating explicit until issue with sudo password will be solved\n            if process.getuid() is 0\n                run_target 'update', args, proto_ctx, cb\n            else\n                cb()\n\n        {go}\n\n    run_seq = (argv, seq, fb) ->\n        START_TIME = new Date\n\n        done = (error=null, results) =>\n            switch error\n                when null\n                    EXIT_STATUS = EXIT_SUCCESS\n\n                when 'stop'\n                    whisper 'Stop from task'\n                    fb.whisper 'Stop from task'\n                    EXIT_STATUS = EXIT_SUCCESS\n\n                when 'sigint'\n                    whisper 'Sigint from outer world'\n                    fb.whisper 'Sigint from outer world'\n                    EXIT_STATUS = EXIT_SIGINT\n\n                when 'target_error'\n                    whisper 'Error from task'\n                    fb.whisper 'Error from task'\n                    EXIT_STATUS = EXIT_TARGET_ERROR\n\n                when 'sub_cafe_error'\n                    whisper \"Error from sub-cafe: #{results}\"\n                    fb.whisper \"Error from sub-cafe: #{results}\"\n                    EXIT_STATUS = results\n\n                when 'partial_success'\n                    whisper \"Finished with errors: #{results}\"\n                    fb.whisper \"Finished with errors: #{results}\"\n                    EXIT_STATUS = EXIT_PARTIAL_SUCCESS\n\n                when 'version_mismatch'\n                    whisper \"No further processing will be taken\"\n                    fb.whisper \"No further processing will be taken\"\n                    EXIT_STATUS = EXIT_VERSION_MISMATCH\n\n                when 'exit_help'\n                    EXIT_STATUS = EXIT_HELP\n\n                when 'bad_recipe'\n                    scream \"#{results}\"\n                    fb.scream \"#{results}\"\n                    EXIT_STATUS = EXIT_OTHER_ERROR\n\n                when 'bad_ctx'\n                    scream \"#{results}\"\n                    fb.scream \"#{results}\"\n                    EXIT_STATUS = EXIT_OTHER_ERROR\n\n                else\n                    scream \"Error encountered: #{error}\"\n                    whisper \"#{error.stack}\"\n                    fb.scream \"Error encountered: #{error}\"\n                    fb.whisper \"#{error.stack}\"\n\n                    EXIT_STATUS = EXIT_OTHER_ERROR\n\n            Emitter.emit EVENT_CAFE_DONE, EXIT_STATUS\n\n        async.series seq, done\n\n    get_version = -> VERSION\n\n    get_targets = ->\n        (get_plugins TARGET_PATH).map (target_name) -> target_name\n\n\n    {ready, get_version, get_targets}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5791}]],"length":5791}
{"contributors":[],"silentsave":false,"ts":1349262721386,"patch":[[{"diffs":[[0,"-uuid'\n\n"],[1,"# dfsdf cloud9 test\n\n"],[0,"{run_tar"]],"start1":925,"start2":925,"length1":16,"length2":37}]],"length":5812,"saved":false}
