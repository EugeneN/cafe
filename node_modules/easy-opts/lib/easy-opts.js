// Generated by CoffeeScript 1.6.1
(function() {
  var GLOBAL, construct_cmd, f, filter_dict, fsm, parse_args, parse_process_args, r, toArray,
    __hasProp = {}.hasOwnProperty;

  GLOBAL = 'global';

  toArray = function(value) {
    if (value == null) {
      value = [];
    }
    if (Array.isArray(value)) {
      return value;
    } else {
      return [value];
    }
  };

  filter_dict = function(d, filter_fn) {
    var k, ret, v;
    ret = {};
    for (k in d) {
      if (!__hasProp.call(d, k)) continue;
      v = d[k];
      if (filter_fn(k, v)) {
        ret[k] = v;
      }
    }
    return Object.freeze(ret);
  };

  f = function(arg) {
    if (arg.slice(0, 2) === '--') {
      return arg.split('=');
    }
    if (arg[0] === '-') {
      return [arg, true];
    }
    return arg;
  };

  fsm = function() {
    var s;
    s = GLOBAL;
    return function(i) {
      if (i[0] !== '-') {
        s = i;
        return [s, null];
      } else {
        return [s, i];
      }
    };
  };

  r = function(prev, cur) {
    var command_key, option, option_key, _name;
    prev[_name = cur[0]] || (prev[_name] = {});
    if (cur[1] != null) {
      option = f(cur[1]);
      command_key = cur[0];
      option_key = option[0].replace('--', '').replace('-', '');
      if (!prev[command_key].hasOwnProperty(option_key)) {
        prev[command_key][option_key] = option[1];
      } else {
        prev[command_key][option_key] = toArray(prev[command_key][option_key]);
        prev[command_key][option_key].push(option[1]);
      }
    }
    return prev;
  };

  parse_args = function(argv) {
    var ret;
    ret = argv.map(fsm()).reduce(r, {});
    if (!ret.hasOwnProperty(GLOBAL)) {
      ret[GLOBAL] = {};
    }
    return Object.freeze(ret);
  };

  parse_process_args = function() {
    return parse_args(process.argv.slice(2));
  };

  construct_cmd = function(args_list) {
    "Constructs cmd from context object. (reverse to get_args_list)\nMa be useful for passing arguments from existing context to spawn or\nexec functions.\nReturns cmd in list format [--arg1, command, --command_arg=val]";
    var arg, arg1, arg2, args, command, format_arg, ret_cmd_vals, val, _ref, _ref1;
    ret_cmd_vals = [];
    arg1 = function(arg) {
      return "-" + arg;
    };
    arg2 = function(arg, val) {
      return "--" + arg + (val === void 0 ? '' : '=' + val);
    };
    format_arg = function(arg, val) {
      if (val === true) {
        return arg1(arg);
      } else {
        return arg2(arg, val);
      }
    };
    _ref = args_list.global;
    for (arg in _ref) {
      val = _ref[arg];
      ret_cmd_vals.push(format_arg(arg, val));
    }
    _ref1 = filter_dict(args_list, function(k, v) {
      return k !== 'global';
    });
    for (command in _ref1) {
      args = _ref1[command];
      ret_cmd_vals.push("" + command);
      for (arg in args) {
        val = args[arg];
        ret_cmd_vals.push(format_arg(arg, val));
      }
    }
    return ret_cmd_vals;
  };

  module.exports = {
    parse_process_args: parse_process_args,
    parse_args: parse_args,
    construct_cmd: construct_cmd
  };

}).call(this);
