// Generated by CoffeeScript 1.4.0
(function() {
  var EVENT_CAFE_DONE, EXIT_SIGINT, IAC_WILL_ECHO, IAC_WONT_ECHO, LOG_PREFIX, Net, PASSWORD_PROMPT, PROMPT, SIGINT, SIGTERM, START_TIME, TELNET_CMD_MARKER, TELNET_UI_HOST, TELNET_UI_PORT, UI_CMD_PREFIX, authenticate, blue, cafe_done_cb, cafe_factory, cyan, draw_logo, events, exit_cb, green, handle_ui_cmd, is_array, logger, match_data_type, not_authenticated_listener, parse_input_from_client, pessimist, red, set_authenticated_socket_listener, set_non_authenticated_socket_listener, subscribe_console_logger, subscribe_fb_logger, ui, uuid, yellow, _base, _ref,
    __slice = [].slice,
    _this = this;

  (_base = Function.prototype).partial || (_base.partial = function() {
    var f, part_args;
    part_args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    f = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return f.apply(this, __slice.call(part_args).concat(__slice.call(args)));
    };
  });

  LOG_PREFIX = 'UI/Telnet>';

  PASSWORD_PROMPT = "Password:";

  Net = require('net');

  events = require('events');

  uuid = require('node-uuid');

  cafe_factory = require('../../cafe');

  is_array = require("../../lib/utils").is_array;

  logger = (require('../../lib/logger'))();

  pessimist = require('../../lib/pessimist');

  draw_logo = require('../../lib/pictures').draw_logo;

  ui = (require('../../lib/uilogger'))(LOG_PREFIX);

  _ref = require('../../defs'), EVENT_CAFE_DONE = _ref.EVENT_CAFE_DONE, EXIT_SIGINT = _ref.EXIT_SIGINT, TELNET_UI_HOST = _ref.TELNET_UI_HOST, TELNET_UI_PORT = _ref.TELNET_UI_PORT, UI_CMD_PREFIX = _ref.UI_CMD_PREFIX, TELNET_CMD_MARKER = _ref.TELNET_CMD_MARKER, IAC_WILL_ECHO = _ref.IAC_WILL_ECHO, IAC_WONT_ECHO = _ref.IAC_WONT_ECHO, SIGINT = _ref.SIGINT, SIGTERM = _ref.SIGTERM;

  green = logger.green, yellow = logger.yellow, red = logger.red, blue = logger.blue, cyan = logger.cyan;

  PROMPT = "\n" + (cyan('?')) + "> ";

  START_TIME = new Date;

  process.on('SIGINT', function() {
    ui.say("SIGINT encountered, Cafe's closing");
    return exit_cb(EXIT_SIGINT);
  });

  process.on('SIGTERM', function() {
    ui.say("SIGTERM encountered, Cafe's closing");
    return exit_cb(EXIT_SIGTERM);
  });

  exit_cb = function(status_code) {
    ui.say("Cafe was open " + ((new Date - START_TIME) / 1000) + "s");
    return process.exit(status_code);
  };

  cafe_done_cb = function(fb) {
    return function(status_code) {
      ui.say("Cafe run finished with status code " + status_code);
      return fb.prompt(" ");
    };
  };

  parse_input_from_client = function(data) {
    var argv_like, clean_data;
    clean_data = data.toString().replace(/(\r\n|\n|\r)/gm, "");
    argv_like = ([null, null].concat(clean_data.split(' '))).filter(function(i) {
      return i !== '';
    });
    return pessimist(argv_like);
  };

  match_data_type = function(raw_data) {
    var clean_data;
    if (raw_data[0] === TELNET_CMD_MARKER) {
      return ['telnet_control_seq', raw_data];
    } else {
      clean_data = raw_data.toString().replace(/(\r\n|\n|\r)/gm, '');
      if (clean_data[0] === UI_CMD_PREFIX) {
        return ['ui_cmd', clean_data];
      } else {
        return ['cafe_cmd', clean_data];
      }
    }
  };

  authenticate = function(_arg) {
    var password;
    password = _arg.password;
    return password === 'cafe';
  };

  handle_ui_cmd = function(socket, fb, cmd, user_is_authenticated) {
    switch (cmd.slice(1)) {
      case 'bye':
        ui.say("User " + socket.remoteAddress + " wants to quit");
        if (user_is_authenticated) {
          socket.write(blue("I'll miss you\n"));
        }
        return socket.end(yellow("Bye\n"));
      case 'ping':
        fb.say(cyan("Pong\n"));
        return fb.prompt(' ');
      case 'help':
        fb.say("Available commands:\n    /ping - say pong\n    /bye  - say goodbye\n    /help - show this help\n");
        return fb.prompt(' ');
    }
  };

  set_authenticated_socket_listener = function(_arg) {
    var fb, socket;
    socket = _arg.socket, fb = _arg.fb;
    return socket.on('data', function(data) {
      var clean_data, kind, _ref1;
      _ref1 = match_data_type(data), kind = _ref1[0], clean_data = _ref1[1];
      return {
        telnet_control_seq: function(clean_data) {
          return ui.say("Got control seq", clean_data);
        },
        ui_cmd: function(clean_data) {
          return handle_ui_cmd(socket, fb, clean_data, true);
        },
        cafe_cmd: function(clean_data) {
          var args, go, ready;
          args = parse_input_from_client(clean_data);
          ui.whisper("Got args from user " + socket.remoteAddress + ":", args);
          ready = cafe_factory().ready;
          go = ready({
            exit_cb: cafe_done_cb(fb),
            fb: fb
          }).go;
          return go({
            args: args
          });
        }
      }[kind](clean_data);
    });
  };

  not_authenticated_listener = function(_arg) {
    var authenticated, fb, set_authenticated, socket;
    socket = _arg.socket, fb = _arg.fb;
    authenticated = false;
    set_authenticated = function(_arg1) {
      var password;
      password = _arg1.password;
      ui.say("User " + socket.remoteAddress + " has been authenticated.");
      fb.say("You have been authenticated successfully");
      fb.prompt("Type --help to get started");
      authenticated = true;
      return set_authenticated_socket_listener({
        socket: socket,
        fb: fb
      });
    };
    return function(data) {
      var clean_data, kind, _ref1;
      if (!authenticated) {
        _ref1 = match_data_type(data), kind = _ref1[0], clean_data = _ref1[1];
        return {
          telnet_control_seq: function(clean_data) {
            return ui.say("Got control seq", clean_data);
          },
          ui_cmd: function(clean_data) {
            return handle_ui_cmd(socket, fb, clean_data, authenticated);
          },
          cafe_cmd: function(clean_data) {
            var password;
            password = clean_data;
            ui.say("Password recieved from " + socket.remoteAddress + ": '" + password + "'");
            if (password && (authenticate({
              password: password
            }))) {
              fb.resetprompt();
              return set_authenticated({
                password: password
              });
            } else {
              return fb.passprompt();
            }
          }
        }[kind](clean_data);
      }
    };
  };

  set_non_authenticated_socket_listener = function(_arg) {
    var fb, socket;
    socket = _arg.socket, fb = _arg.fb;
    draw_logo(fb);
    fb.passprompt();
    return socket.on('data', not_authenticated_listener({
      socket: socket,
      fb: fb
    }));
  };

  subscribe_console_logger = function() {
    var console_log_handler, console_logger;
    console_log_handler = function(type, color) {
      return function(message) {
        return console[type].apply(console, message);
      };
    };
    console_logger = {
      say: console_log_handler('log'),
      shout: console_log_handler('info'),
      scream: console_log_handler('error'),
      whisper: console_log_handler('error'),
      murmur: function(message) {
        return console.log(message[0]);
      }
    };
    return logger.subscribe(console_logger);
  };

  subscribe_fb_logger = function() {
    return function(socket) {
      var fb, fb_log_handler, my_LOG_PREFIX;
      fb_log_handler = function(log_prefix, color) {
        return function() {
          var message, msg, prefix;
          message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          prefix = color ? color(log_prefix) : '';
          msg = is_array(message) ? message.join(' ') : message;
          return socket.write("" + prefix + " " + msg + "\n");
        };
      };
      my_LOG_PREFIX = [uuid.v4(), LOG_PREFIX].join('-');
      fb = {
        say: fb_log_handler(my_LOG_PREFIX, green),
        shout: fb_log_handler(my_LOG_PREFIX, yellow),
        scream: fb_log_handler(my_LOG_PREFIX, red),
        whisper: fb_log_handler(my_LOG_PREFIX, red),
        murmur: fb_log_handler(),
        prompt: function(a) {
          return socket.write("" + a + PROMPT);
        },
        passprompt: function(a) {
          fb.raw(IAC_WILL_ECHO);
          return fb.raw(PASSWORD_PROMPT + " ");
        },
        resetprompt: function() {
          return fb.raw(IAC_WONT_ECHO);
        },
        raw: function(a) {
          var b;
          b = new Buffer(a);
          return socket.write(b);
        }
      };
      return fb;
    };
  };

  module.exports = function() {
    var server;
    subscribe_console_logger();
    server = Net.createServer(function(socket) {
      var fb;
      fb = subscribe_fb_logger()(socket);
      ui.say("New connection created for " + socket.remoteAddress);
      return set_non_authenticated_socket_listener({
        socket: socket,
        fb: fb
      });
    });
    server.listen(TELNET_UI_PORT, TELNET_UI_HOST);
    return ui.say("Server started on " + TELNET_UI_HOST + ":" + TELNET_UI_PORT);
  };

}).call(this);
