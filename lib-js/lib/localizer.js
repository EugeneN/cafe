// Generated by CoffeeScript 1.3.3
(function() {
  var EXCLUDE_PATTERN, Gettext, INCLUDE_PATTERN, LOG_PREFIX, NEW_LINE, PO_FILE_NAME, PO_FILE_SUFFIX, async, fs, get_available_locales, get_writer, help, is_dir, localize_file, localize_run, optimist, path, say, scream, shout, translate_dir_to_locale, translate_fn_to_locale, _get_files, _go_after_locale_factory, _localization_cycle, _ref,
    __slice = [].slice;

  path = require('path');

  fs = require('fs');

  optimist = require('optimist');

  async = require('async');

  Gettext = require('./gettext');

  _ref = require('./logger')("Localizer>"), say = _ref.say, shout = _ref.shout, scream = _ref.scream;

  is_dir = require('./utils').is_dir;

  NEW_LINE = '\n';

  PO_FILE_SUFFIX = 'LC_MESSAGES';

  PO_FILE_NAME = 'uaprom.po';

  EXCLUDE_PATTERN = /\-min\.js$/i;

  INCLUDE_PATTERN = /\.js$/i;

  LOG_PREFIX = 'LOCA>';

  help = function() {
    optimist.showHelp();
    return process.exit(3);
  };

  get_available_locales = function(root_dir) {
    var fn, _i, _len, _ref1, _results;
    _ref1 = fs.readdirSync(root_dir);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      fn = _ref1[_i];
      if (is_dir(path.join(root_dir, fn))) {
        _results.push(fn);
      }
    }
    return _results;
  };

  get_writer = function(filename_to_translate, cb) {
    return function(locale, data) {
      var base_dir, base_name, new_base_dir, new_filename, write_file;
      base_dir = path.dirname(filename_to_translate);
      base_name = path.basename(filename_to_translate);
      new_base_dir = path.join(base_dir, locale);
      new_filename = path.join(new_base_dir, base_name);
      write_file = function() {
        return fs.writeFile(new_filename, data, function(err) {
          if (err) {
            shout("Error writing file " + new_filename + ": " + err);
          }
          say("Writing localized file " + new_filename);
          return typeof cb === "function" ? cb() : void 0;
        });
      };
      if (is_dir(new_base_dir)) {
        return write_file();
      } else {
        return fs.mkdir(new_base_dir, '0755', function(err) {
          if (err) {
            return shout("Error creating directory " + new_base_dir + ": " + err);
          } else {
            return write_file();
          }
        });
      }
    };
  };

  localize_file = function(filename_to_translate, locale, gettext, cb) {
    var translate_line;
    translate_line = function(line) {
      var _replacer;
      _replacer = function(fun) {
        return function() {
          var m, quote, text;
          m = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          quote = m[2];
          text = gettext[fun](m[3]);
          text = text.replace(quote, '\\' + quote);
          return quote + text + quote;
        };
      };
      line = line.replace(/\b(_\(\s*?(['"])(.*?)['"]\s*?\))/g, _replacer('gettext'));
      return line = line.replace(/\b(gettext\(\s*?(['"])(.*?)['"]\s*?\))/g, _replacer('gettext'));
    };
    return fs.readFile(filename_to_translate, 'utf-8', function(err, data) {
      var line;
      if (err) {
        return shout("Error reading file " + filename_to_translate + ": " + err);
      } else {
        return get_writer(filename_to_translate, cb)(locale, ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = data.split(NEW_LINE);
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            line = _ref1[_i];
            _results.push(translate_line(line));
          }
          return _results;
        })()).join(NEW_LINE));
      }
    });
  };

  translate_dir_to_locale = function(dir, locale, gettext, cb) {
    return fs.readdir(dir, function(err, list) {
      if (err) {
        return shout("Error reading directory " + dir + ": " + err);
      } else if (list.length) {
        return list.map(function(filename) {
          return translate_fn_to_locale(dir, filename, locale, gettext);
        });
      }
    });
  };

  translate_fn_to_locale = function(filename, locale, gettext, cb) {
    if (filename.match(INCLUDE_PATTERN) && !filename.match(EXCLUDE_PATTERN)) {
      return fs.stat(filename, function(err, stat) {
        if (err) {
          return shout("Error getting stat on " + ("" + filename + ": " + err));
        } else {
          if (!(stat != null ? stat.isDirectory() : void 0)) {
            return localize_file(filename, locale, gettext, cb);
          }
        }
      });
    } else {
      return typeof cb === "function" ? cb() : void 0;
    }
  };

  _go_after_locale_factory = function(locale, po_file_name, filename) {
    return function(cb) {
      var gettext;
      gettext = new Gettext(locale);
      return gettext.loadLanguageFile(po_file_name, function() {
        return translate_fn_to_locale(filename, locale, gettext, cb);
      });
    };
  };

  _localization_cycle = function(locales_root_dir, filename) {
    return function(cb) {
      var locale, po_file_name, seq, _i, _len, _ref1;
      seq = [];
      _ref1 = get_available_locales(locales_root_dir);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        locale = _ref1[_i];
        po_file_name = path.join(locales_root_dir, locale, PO_FILE_SUFFIX, PO_FILE_NAME);
        seq.push(_go_after_locale_factory(locale, po_file_name, filename));
      }
      return async.series(seq, function() {
        return typeof cb === "function" ? cb() : void 0;
      });
    };
  };

  _get_files = function(dir) {
    var file, _i, _len, _ref1, _results;
    _ref1 = fs.readdirSync(dir);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      file = _ref1[_i];
      if (fs.statSync(path.join(dir, file)).isFile()) {
        _results.push(path.join(dir, file));
      }
    }
    return _results;
  };

  localize_run = function(locales_root_dir, filename, cb) {
    var dir, f, seq, _i, _len, _ref1;
    say("Running localization for " + filename);
    dir = fs.lstatSync(filename).isDirectory();
    seq = [];
    console.log('files', _get_files(filename));
    if (!dir) {
      seq.push(_localization_cycle(locales_root_dir, filename));
    } else {
      _ref1 = _get_files(filename);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        f = _ref1[_i];
        seq.push(_localization_cycle(locales_root_dir, f));
      }
    }
    return async.series(seq, function() {
      say("Localization is done");
      return typeof cb === "function" ? cb() : void 0;
    });
  };

  module.exports = {
    localize_run: localize_run
  };

}).call(this);
