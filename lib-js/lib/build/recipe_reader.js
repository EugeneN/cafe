// Generated by CoffeeScript 1.6.1
(function() {
  var RECIPE, domonad, error_monad, extend, get_modules, is_file, path, read_json_file, read_recipe, _ref, _ref1;

  path = require('path');

  _ref = require('../../lib/utils'), read_json_file = _ref.read_json_file, extend = _ref.extend, is_file = _ref.is_file;

  _ref1 = require('../../lib/libmonad'), domonad = _ref1.domonad, error_monad = _ref1.error_monad;

  RECIPE = 'recipe.json';

  read_recipe = function(recipe_path, level) {
    var chain_check, check_for_inheritance, read_if_is_file, _get_recipe;
    if (level == null) {
      level = 0;
    }
    chain_check = function(recipe_path) {
      if (level > 3) {
        return ["Recipe inheritance chain to long", void 0];
      } else {
        return [void 0, recipe_path];
      }
    };
    read_if_is_file = function(recipe_path) {
      if (is_file(recipe_path)) {
        return [void 0, read_json_file(recipe_path)];
      } else {
        return ["Recipe file " + recipe_path + " is not found", void 0];
      }
    };
    check_for_inheritance = function(recipe) {
      var base_recipe, base_recipe_path, error, _ref2, _ref3;
      if (recipe != null ? (_ref2 = recipe.abstract) != null ? _ref2["extends"] : void 0 : void 0) {
        base_recipe_path = path.resolve(path.dirname(recipe_path), recipe.abstract["extends"]);
        if (base_recipe_path !== recipe_path) {
          _ref3 = read_recipe(base_recipe_path, level + 1), error = _ref3[0], base_recipe = _ref3[1];
          recipe = extend(base_recipe, recipe);
        } else {
          error = "Recipe " + recipe_path + " can not inherit from itself";
        }
      }
      return [error, recipe];
    };
    _get_recipe = domonad(error_monad, [chain_check, read_if_is_file, check_for_inheritance]);
    return _get_recipe(recipe_path);
  };

  get_modules = function(recipe) {
    return recipe.modules;
  };

  module.exports = {
    get_modules: get_modules,
    read_recipe: read_recipe
  };

}).call(this);
