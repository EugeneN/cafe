// Generated by CoffeeScript 1.3.3
(function() {
  var CB_SUCCESS, path, stitch;

  stitch = new require('./stitch');

  CB_SUCCESS = require('../defs').CB_SUCCESS;

  path = require('path');

  exports.stitch_sources = function(files, cb) {
    "Accepts sources and dependencies for bundling.\n    sources: {filename, source}\n    dependencies: [source, source ...]\n\nReturns stitched module.";

    var Package, deps, f, filename, fn_without_ext, pack, source, sources, _filename, _ref;
    Package = new stitch.Package({});
    fn_without_ext = function(filename) {
      var ext_length;
      ext_length = (path.extname(filename)).length;
      return filename.slice(0, -ext_length);
    };
    pack = (function() {
      var _i, _len, _ref, _ref1;
      if (files.sources) {
        sources = {};
        if (files.sources instanceof Array) {
          _ref = files.sources;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            filename = f.filename, source = f.source;
            _filename = fn_without_ext(filename);
            sources[_filename] = {
              filename: filename,
              source: source
            };
          }
        } else {
          _ref1 = files.sources, filename = _ref1.filename, source = _ref1.source;
          _filename = fn_without_ext(filename);
          sources[_filename] = {
            filename: filename,
            source: source
          };
        }
        return Package.get_result_bundle(sources);
      }
    })();
    deps = (_ref = files.dependencies) != null ? _ref.join('\n') : void 0;
    return cb(CB_SUCCESS, [deps, pack].join('\n'));
  };

}).call(this);
