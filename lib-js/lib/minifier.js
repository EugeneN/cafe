// Generated by CoffeeScript 1.4.0
(function() {
  var EVENT_MINIFY_DONE, FILE_ENCODING, MINIFY_EXCLUDE_PATTERN, MINIFY_INCLUDE_PATTERN, MINIFY_MIN_SUFFIX, Minifier, async, fs, get_mtime, is_dir, is_file, path, say, scream, shout, uglify, walk, whisper, _ref, _ref1, _ref2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  async = require('async');

  _ref = require('./utils'), get_mtime = _ref.get_mtime, is_file = _ref.is_file, is_dir = _ref.is_dir, walk = _ref.walk;

  _ref1 = (require('./logger'))("Minify>"), say = _ref1.say, shout = _ref1.shout, scream = _ref1.scream, whisper = _ref1.whisper;

  _ref2 = require('../defs'), FILE_ENCODING = _ref2.FILE_ENCODING, MINIFY_INCLUDE_PATTERN = _ref2.MINIFY_INCLUDE_PATTERN, MINIFY_EXCLUDE_PATTERN = _ref2.MINIFY_EXCLUDE_PATTERN, MINIFY_MIN_SUFFIX = _ref2.MINIFY_MIN_SUFFIX;

  EVENT_MINIFY_DONE = "MINIFY_DONE";

  Minifier = (function() {

    function Minifier(ctx) {
      this.minify = __bind(this.minify, this);
      this.src_dir = ctx.own_args.src;
      this.dst_dir = ctx.own_args.dst;
      this.fn_pattern = ctx.own_args.pattern;
      this.emitter = ctx.emitter;
      this.fb = ctx.fb;
    }

    Minifier.prototype.minify = function(cb, force) {
      var do_it,
        _this = this;
      do_it = function(err, results) {
        var done, f, routines, runner;
        if (err) {
          return cb('fs_error', err);
        } else {
          routines = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              f = results[_i];
              _results.push(this._get_minificator(f, this.dst_dir, this.fn_pattern, force));
            }
            return _results;
          }).call(_this);
          runner = function(fun, cb) {
            return fun(cb);
          };
          done = function(err, res) {
            return cb(err, res);
          };
          return async.map(routines, runner, done);
        }
      };
      if (is_file(this.src_dir)) {
        return do_it(null, [this.src_dir]);
      } else {
        return walk(this.src_dir, do_it);
      }
    };

    Minifier.prototype._get_minificator = function(file, dst_dir, fn_pattern, force) {
      var _this = this;
      return function(cb) {
        var basename, dirname, full_filename, min_filename, min_full_filename;
        full_filename = path.resolve(file);
        dirname = dst_dir || path.dirname(full_filename);
        basename = path.basename(full_filename);
        if ((MINIFY_INCLUDE_PATTERN.test(basename)) && !(MINIFY_EXCLUDE_PATTERN.test(basename))) {
          if (fn_pattern && !basename.match(fn_pattern)) {
            return cb();
          }
          min_filename = basename.replace(MINIFY_INCLUDE_PATTERN, MINIFY_MIN_SUFFIX);
          min_full_filename = path.resolve(dirname, min_filename);
          if (!force) {
            if (!_this._maybe_minify(full_filename, min_full_filename)) {
              _this.emitter.emit("MINIFY_SKIP");
              _this.fb.shout("" + min_full_filename + " still hot");
              return cb();
            }
          }
          return fs.readFile(full_filename, FILE_ENCODING, function(err, data) {
            if (err) {
              _this.fb.shout("Error reading file '" + full_filename + "': " + err);
              scream("Error reading file '" + full_filename + "': " + err);
              return cb();
            } else {
              return fs.writeFile(min_full_filename, (uglify.minify(data, {
                fromString: true
              })).code, FILE_ENCODING, function(err) {
                if (err) {
                  _this.fb.shout("Error writing file '" + min_full_filename + "': " + err);
                  scream("Error writing file '" + min_full_filename + "': " + err);
                  return cb();
                } else {
                  _this.fb.say("" + min_full_filename + " written");
                  _this.emitter.emit(EVENT_MINIFY_DONE);
                  return cb();
                }
              });
            }
          });
        } else {
          return cb();
        }
      };
    };

    Minifier.prototype._maybe_minify = function(file, min_file) {
      try {
        return (get_mtime(file)) >= (get_mtime(min_file));
      } catch (ex) {
        return true;
      }
    };

    return Minifier;

  })();

  module.exports = Minifier;

}).call(this);
