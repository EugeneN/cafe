// Generated by CoffeeScript 1.3.3
(function() {
  var fs, get_all_relative_files, is_dir, make_skelethon, parse, path, _ref;

  fs = require('fs');

  path = require('path');

  _ref = require('../utils'), is_dir = _ref.is_dir, get_all_relative_files = _ref.get_all_relative_files;

  parse = function(data, values) {
    return data.replace(/\{\{([^}]+)\}\}/g, function(_, key) {
      return values[key];
    });
  };

  make_skelethon = function(_arg) {
    var fb, replace_map, result_path, skelethon_path, values;
    skelethon_path = _arg.skelethon_path, result_path = _arg.result_path, values = _arg.values, replace_map = _arg.replace_map, fb = _arg.fb;
    if (!skelethon_path) {
      throw "skelethon path is not set";
    }
    if (!result_path) {
      throw "result path is not set";
    }
    skelethon_path = path.normalize(skelethon_path);
    return (get_all_relative_files(skelethon_path)).map(function(_path) {
      var data, dir, file, out;
      out = _path.replace(skelethon_path, '');
      dir = path.dirname(out);
      file = path.basename(out);
      if (replace_map != null ? replace_map.hasOwnProperty(file) : void 0) {
        out = path.join(dir, replace_map[file]);
      }
      out = path.join(result_path, out);
      out = path.normalize(out);
      if (is_dir(_path)) {
        fs.mkdirSync(out, 0x1fd);
        return fb != null ? fb.say("Dirrectory created " + out) : void 0;
      } else if (fs.existsSync(out)) {
        throw "" + path + " already exists";
      } else {
        data = parse(fs.readFileSync(_path, 'utf8'), values);
        fs.writeFileSync(out, data);
        return fb != null ? fb.say("File created " + out) : void 0;
      }
    });
  };

  module.exports = {
    make_skelethon: make_skelethon
  };

}).call(this);
