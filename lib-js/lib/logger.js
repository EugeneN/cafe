// Generated by CoffeeScript 1.4.0
(function() {
  var DEBUG, LOG_PREFIX_DEBUG, LOG_PREFIX_ERROR, LOG_PREFIX_INFO, LOG_PREFIX_WARN, NOCOLOR, SUBSCRIBERS, VERBOSE, blue, color, cyan, debug, default_prefix, error, ext_debug, ext_error, ext_info, ext_log, ext_murmur, ext_warn, green, info, log_type, murmur, nocolor, panic_mode, red, say, scream, shout, shutup, subscribe, unsubscribe, warn, whisper, white, yellow, _base,
    __slice = [].slice;

  (_base = Function.prototype).partial || (_base.partial = function() {
    var f, part_args;
    part_args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    f = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return f.apply(this, __slice.call(part_args).concat(__slice.call(args)));
    };
  });

  default_prefix = 'Cafe>';

  VERBOSE = true;

  DEBUG = false;

  NOCOLOR = false;

  SUBSCRIBERS = [];

  try {
    color = require("ansi-color").set;
    red = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'red');
      }
    };
    green = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'green');
      }
    };
    yellow = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'yellow');
      }
    };
    blue = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'blue');
      }
    };
    white = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'white');
      }
    };
    cyan = function(s) {
      if (NOCOLOR) {
        return s;
      } else {
        return color(s, 'cyan');
      }
    };
  } catch (e) {
    red = yellow = green = blue = white = cyan = function(s) {
      return s;
    };
  }

  subscribe = function(fb) {
    return SUBSCRIBERS.push(fb);
  };

  unsubscribe = function(fb) {
    var new_subscribers;
    new_subscribers = SUBSCRIBERS.filter(function(s) {
      return s !== fb;
    });
    return SUBSCRIBERS = new_subscribers;
  };

  shutup = function(m) {
    switch (m) {
      case true:
        return VERBOSE = false;
      case false:
        return VERBOSE = true;
      default:
        return VERBOSE;
    }
  };

  panic_mode = function(m) {
    switch (m) {
      case true:
        return DEBUG = true;
      case false:
        return DEBUG = false;
      default:
        return DEBUG;
    }
  };

  nocolor = function(m) {
    switch (m) {
      case true:
        return NOCOLOR = true;
      case false:
        return NOCOLOR = false;
      default:
        return NOCOLOR;
    }
  };

  log_type = function(prefix, color) {
    prefix || (prefix = default_prefix);
    return color(prefix);
  };

  LOG_PREFIX_DEBUG = function(prefix) {
    return log_type("[DEBUG]" + (prefix || default_prefix), red);
  };

  LOG_PREFIX_ERROR = function(prefix) {
    return log_type(prefix, red);
  };

  LOG_PREFIX_INFO = function(prefix) {
    return log_type(prefix, green);
  };

  LOG_PREFIX_WARN = function(prefix) {
    return log_type(prefix, yellow);
  };

  ext_log = function(type, msg) {
    return SUBSCRIBERS.map(function(s) {
      return s[type](msg);
    });
  };

  ext_info = ext_log.partial('say');

  ext_warn = ext_log.partial('shout');

  ext_error = ext_log.partial('scream');

  ext_debug = ext_log.partial('whisper');

  ext_murmur = ext_log.partial('murmur');

  info = function(log_type) {
    return function(prefix) {
      return function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (VERBOSE) {
          a.unshift(log_type(prefix));
          return ext_info(a);
        }
      };
    };
  };

  warn = function(log_type) {
    return function(prefix) {
      return function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (VERBOSE) {
          a.unshift(log_type(prefix));
          return ext_warn(a);
        }
      };
    };
  };

  error = function(log_type) {
    return function(prefix) {
      return function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        a.unshift(log_type(prefix));
        return ext_error(a);
      };
    };
  };

  debug = function(log_type) {
    return function(prefix) {
      return function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (DEBUG) {
          a.unshift(log_type(prefix));
          return ext_debug(a);
        }
      };
    };
  };

  murmur = function() {
    var a;
    a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (VERBOSE) {
      return ext_murmur(a);
    }
  };

  say = info(LOG_PREFIX_INFO);

  shout = warn(LOG_PREFIX_WARN);

  scream = error(LOG_PREFIX_ERROR);

  whisper = debug(LOG_PREFIX_DEBUG);

  module.exports = function(prefix) {
    return {
      say: say(prefix),
      shout: shout(prefix),
      scream: scream(prefix),
      whisper: whisper(prefix),
      murmur: murmur,
      shutup: shutup,
      panic_mode: panic_mode,
      nocolor: nocolor,
      red: red,
      yellow: yellow,
      green: green,
      blue: blue,
      white: white,
      cyan: cyan,
      subscribe: subscribe,
      unsubscribe: unsubscribe
    };
  };

}).call(this);
