// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrapper_file, fs, path, wrap_bundle, wrap_file, wrap_module, wrap_modules;

  fs = require('fs');

  path = require('path');

  bootstrapper_file = path.join(__dirname, './bootstrapper.js');

  wrap_bundle = function(source, pre_header) {
    if (pre_header == null) {
      pre_header = null;
    }
    "@source: source code of bundle.";

    return [pre_header || '', (fs.readFileSync(bootstrapper_file)).toString(), source].join('\n');
  };

  wrap_modules = function(modules) {
    "@moduels: list of dict with values {sources, ns}\n        [\n            {ns:'namespace', sources: {filename: source}}\n            .\n            .\n            .\n        ]";

    var m;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        m = modules[_i];
        _results.push(wrap_module(m.sources, m.ns));
      }
      return _results;
    })()).join('\n');
  };

  wrap_module = function(sources, ns) {
    "@sources: dict of key values filenames and source codes {filename, source}";

    var s;
    if (sources.length) {
      return [
        ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            s = sources[_i];
            if (s.type === "plainjs") {
              _results.push(s.source);
            }
          }
          return _results;
        })()).join('\n'), "require.define('" + ns + "', {", ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = sources.length; _i < _len; _i++) {
            s = sources[_i];
            if (s.type === 'commonjs') {
              _results.push(wrap_file(s.source, s.filename, s.type, ns));
            }
          }
          return _results;
        })()).join(',\n'), "});\n"
      ].join('\n');
    } else {
      if (sources.type === 'commonjs') {
        return wrap_module([sources], ns);
      } else {
        return sources.source;
      }
    }
  };

  wrap_file = function(source, filename, type, ns) {
    return ["/*ZB:  " + ns + "/" + filename + " */", "'" + filename + "': function(exports, require, module) {(function() {", source, "}).call(this);}"].join('\n');
  };

  module.exports = {
    wrap_bundle: wrap_bundle,
    wrap_module: wrap_module,
    wrap_modules: wrap_modules
  };

}).call(this);
