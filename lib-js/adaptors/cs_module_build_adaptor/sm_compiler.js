// Generated by CoffeeScript 1.3.3
(function() {
  var SLUG_FN, SM_Compiler, add, exec, fs, is_file, path, read_slug, say, scream, shout, whisper, _package, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  _package = require('../../lib/stitch');

  exec = require('child_process').exec;

  _ref = require('../../lib/utils'), add = _ref.add, is_file = _ref.is_file, read_slug = _ref.read_slug;

  _ref1 = (require('../../lib/logger'))("CSMCompiler>"), say = _ref1.say, shout = _ref1.shout, scream = _ref1.scream, whisper = _ref1.whisper;

  SLUG_FN = require('../../defs').SLUG_FN;

  SM_Compiler = (function() {
    /*
        Spine module compiler.
    */

    function SM_Compiler(base_path, ctx, options) {
      var slug_options;
      this.base_path = base_path;
      this.ctx = ctx;
      if (options == null) {
        options = {};
      }
      this._write_file = __bind(this._write_file, this);

      this._abs_path = __bind(this._abs_path, this);

      this.emitter = this.ctx.emitter;
      this.fb = this.ctx.fb;
      options.slug = this._abs_path(SLUG_FN);
      slug_options = this.readSlug(options.slug);
      this.options = add(slug_options, options);
    }

    SM_Compiler.prototype.readSlug = function(slug) {
      var json_slug;
      if (is_file(slug)) {
        json_slug = read_slug(path.dirname(slug));
        scream(slug, json_slug);
        json_slug.paths = json_slug.paths.map(this._abs_path);
        json_slug["public"] = this._abs_path(json_slug["public"]);
        json_slug.fileTests = this._abs_path(json_slug.fileTests);
        json_slug.folderTests = this._abs_path(json_slug.folderTests);
        return json_slug;
      } else {
        return {};
      }
    };

    SM_Compiler.prototype._abs_path = function(rel) {
      if (rel) {
        return path.resolve(path.join(this.base_path, rel));
      }
    };

    SM_Compiler.prototype._get_js_path = function() {
      return path.join(this.options["public"], this.options.jsPath);
    };

    SM_Compiler.prototype._write_file = function(filename, source, cb) {
      var _this = this;
      return fs.writeFile(filename, source, function(err) {
        if (err) {
          throw err;
        } else {
          return cb();
        }
      });
    };

    SM_Compiler.prototype.build = function(cb) {
      var source,
        _this = this;
      try {
        return source = this.module().compile(function(err, source) {
          var js_path;
          js_path = _this._get_js_path();
          return _this._write_file(js_path, source, function() {
            _this.fb.say("" + js_path + " brewed.");
            _this.emitter.emit("COMPILE_DONE");
            return typeof cb === "function" ? cb(null, js_path) : void 0;
          });
        });
      } catch (error) {
        this.fb.scream("Failed to build " + this.base_path + " " + error);
        this.fb.whisper("" + error.stack);
        scream("Failed to build " + this.base_path + " " + error);
        whisper("" + error.stack);
        this.emitter.emit("COMPILE_FAIL");
        return typeof cb === "function" ? cb('target_error') : void 0;
      }
    };

    SM_Compiler.prototype.build_tests = function(cb) {
      var COFFEE, cmd, cwd, filename, folder_tests,
        _this = this;
      COFFEE = '/usr/bin/coffee';
      if (!((this.options.fileTests != null) || (this.options.folderTests != null))) {
        this.fb.shout("Test folder is not set " + this.base_path);
        this.emitter.emit("COMPILE_TESTS_SKIP");
        if (typeof cb === "function") {
          cb();
        }
        return;
      }
      filename = this.options.fileTests;
      folder_tests = this.options.folderTests;
      if (filename) {
        cmd = "" + COFFEE + " -c -o " + folder_tests + " " + filename;
        cwd = this.base_path;
        return exec(cmd, {
          cwd: cwd
        }, function(err, stdout, stderr) {
          if (err) {
            _this.fb.scream("Build failed for tests: " + err);
            if (typeof cb === "function") {
              cb();
            }
            return _this.emitter.emit("COMPILE_TESTS_FAIL");
          } else {
            _this.fb.say("Tests built for " + filename);
            if (typeof cb === "function") {
              cb();
            }
            return _this.emitter.emit("COMPILE_TESTS_DONE");
          }
        });
      } else {
        this.fb.scream("File with the tests could not be found");
        return typeof cb === "function" ? cb() : void 0;
      }
    };

    SM_Compiler.prototype.module = function() {
      return _package.createPackage({
        dependencies: this.options.dependencies,
        paths: this.options.paths,
        libs: this.options.libs
      });
    };

    return SM_Compiler;

  })();

  module.exports = SM_Compiler;

}).call(this);
