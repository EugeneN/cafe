// Generated by CoffeeScript 1.3.3
(function() {
  "Slug.json module compiler.";

  var SLUG_FN, SM_Compiler, add, exec, fs, is_file, path, read_slug, _package, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  _package = require('../../lib/stitch');

  exec = require('child_process').exec;

  _ref = require('../../lib/utils'), add = _ref.add, is_file = _ref.is_file, read_slug = _ref.read_slug;

  SLUG_FN = require('../../defs').SLUG_FN;

  SM_Compiler = (function() {
    /*
        Slug.json module compiler.
    */

    function SM_Compiler(base_path, ctx, options) {
      var slug_options;
      this.base_path = base_path;
      this.ctx = ctx;
      if (options == null) {
        options = {};
      }
      this._abs_path = __bind(this._abs_path, this);

      this.emitter = this.ctx.emitter;
      this.fb = this.ctx.fb;
      options.slug = this._abs_path(SLUG_FN);
      slug_options = this.readSlug(options.slug);
      this.options = add(slug_options, options);
    }

    SM_Compiler.prototype.readSlug = function(slug) {
      var json_slug;
      if (is_file(slug)) {
        json_slug = read_slug(path.dirname(slug));
        json_slug.paths = json_slug.paths.map(this._abs_path);
        return json_slug;
      } else {
        return {};
      }
    };

    SM_Compiler.prototype._abs_path = function(rel) {
      if (rel) {
        return path.resolve(path.join(this.base_path, rel));
      }
    };

    SM_Compiler.prototype.build = function(cb) {
      var source,
        _this = this;
      try {
        return source = this.module().compile(function(err, source) {});
      } catch (_error) {}
    };

    SM_Compiler.prototype.module = function() {
      return _package.createPackage({
        dependencies: this.options.dependencies,
        paths: this.options.paths,
        libs: this.options.libs
      });
    };

    return SM_Compiler;

  })();

  module.exports = SM_Compiler;

}).call(this);
