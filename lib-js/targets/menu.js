// Generated by CoffeeScript 1.3.3
(function() {
  var CLEAN_ALL_PASS, MENU_FILENAME, SUB_CAFE, add, async, build_cmd, clean_menu, compose, cook_menu, cook_tea, filter_dict, fork, fs, help, is_debug_context, make_target, path, read_json_file, read_menu, say, scream, shout, spawn, store_new_menu, waiter, whisper, write_menu, _ref, _ref1, _ref2, _ref3;

  CLEAN_ALL_PASS = 'allyesiamsure';

  help = ["Prepares your coffee according to the menu selection.\nPrints current menu if called without paramaters.\n\nParameters:\n\n    --new=<name> <any other cafe options>\n        saves all cafe options to the menu under the name <name>\n\n    --expire <name>\n        removes specified dish from the menu\n        expires the whole menu if <name> == " + CLEAN_ALL_PASS + "\n\n    --show <name>\n        shows ingredients\n\n    --justatea <name>\n        just prints commands in plain text\n\n    <name>\n        serves ordered menu for your pleasure.\n        Bon appetite!\n\n    --help\n        this help\n\n    prints current menu if called without arguments."];

  fs = require('fs');

  path = require('path');

  async = require('async');

  compose = require('underscore').compose;

  _ref = require('child_process'), fork = _ref.fork, spawn = _ref.spawn;

  make_target = require('../lib/target').make_target;

  _ref1 = require('../lib/logger')("Menu>"), say = _ref1.say, shout = _ref1.shout, scream = _ref1.scream, whisper = _ref1.whisper;

  _ref2 = require('../lib/utils'), filter_dict = _ref2.filter_dict, is_debug_context = _ref2.is_debug_context, read_json_file = _ref2.read_json_file, add = _ref2.add;

  _ref3 = require('../defs'), MENU_FILENAME = _ref3.MENU_FILENAME, SUB_CAFE = _ref3.SUB_CAFE;

  read_menu = function(fn) {
    return (read_json_file(fn)) || {};
  };

  write_menu = function(fn, data) {
    try {
      return fs.writeFileSync(fn, JSON.stringify(data, null, 4));
    } catch (e) {
      return scream("Error writing menu: '" + e + "'");
    }
  };

  build_cmd = function(current_ctx, my_menu) {
    var arg, arg1, arg2, args, cmd_args, command, format_arg, val, _ref4, _ref5;
    arg1 = function(arg) {
      return "-" + arg;
    };
    arg2 = function(arg, val) {
      return "--" + arg + (val === void 0 ? '' : '=' + val);
    };
    format_arg = function(arg, val) {
      if (val === true) {
        return arg1(arg);
      } else {
        return arg2(arg, val);
      }
    };
    cmd_args = ['--nologo', '--child'];
    if (is_debug_context(current_ctx)) {
      cmd_args.push('--debug');
    }
    _ref4 = my_menu.global;
    for (arg in _ref4) {
      val = _ref4[arg];
      cmd_args.push(format_arg(arg, val));
    }
    _ref5 = filter_dict(my_menu, function(k, v) {
      return k !== 'global';
    });
    for (command in _ref5) {
      args = _ref5[command];
      cmd_args.push("" + command);
      for (arg in args) {
        val = args[arg];
        cmd_args.push(format_arg(arg, val));
      }
    }
    return cmd_args;
  };

  cook_tea = function(current_ctx, my_menu, cb) {
    var cmd_args;
    cmd_args = build_cmd(current_ctx, my_menu);
    current_ctx.fb.say("" + (path.basename(process.argv[1])) + " " + (cmd_args.join(" ")) + "\n");
    current_ctx.fb.shout("Do you have some tips for me?");
    return typeof cb === "function" ? cb('stop') : void 0;
  };

  cook_menu = function(current_ctx, my_menu, cb) {
    var child, cmd_args;
    cmd_args = build_cmd(current_ctx, my_menu);
    current_ctx.fb.say("Replaying command sequence `" + (cmd_args.join(" ")) + "`");
    child = spawn(SUB_CAFE, cmd_args);
    child.on('message', function(m) {
      return current_ctx.fb.murmur(m);
    });
    child.stdout.on('data', function(data) {
      return current_ctx.fb.say(("" + data).replace(/\n$/, ''));
    });
    child.stderr.on('data', function(data) {
      return current_ctx.fb.scream(("" + data).replace(/\n$/, ''));
    });
    return child.on('exit', function(code) {
      if (code === 0) {
        current_ctx.fb.say("Command sequence succeeded");
        return typeof cb === "function" ? cb('stop') : void 0;
      } else {
        current_ctx.fb.scream("Command sequence failed with code " + code);
        return typeof cb === "function" ? cb("sub_cafe_error", code) : void 0;
      }
    });
  };

  store_new_menu = function(reader, writer, new_menu_item_name, new_menu_item_value) {
    var existing_menu, new_item, new_menu;
    existing_menu = reader();
    new_item = {};
    new_item[new_menu_item_name] = new_menu_item_value;
    new_menu = add(existing_menu, new_item);
    return writer(new_menu);
  };

  clean_menu = function(reader, writer, item_to_clean) {
    var existing_menu;
    if (item_to_clean === CLEAN_ALL_PASS) {
      return writer({});
    } else {
      existing_menu = reader();
      return writer(filter_dict(existing_menu, function(k, v) {
        return k !== item_to_clean;
      }));
    }
  };

  waiter = function(ctx, cb) {
    var arg1, arg2, read_my_menu, write_my_menu, _do_default, _do_expire_menu, _do_help, _do_just_tea, _do_new_menu, _do_serve_menu, _do_show_menu, _ref4;
    read_my_menu = read_menu.partial(MENU_FILENAME);
    write_my_menu = write_menu.partial(MENU_FILENAME);
    _do_new_menu = function(name) {
      var new_menu;
      new_menu = filter_dict(ctx.full_args, function(k, v) {
        return k !== 'menu';
      });
      ctx.fb.say("Saving new menu " + name + "...");
      store_new_menu(read_my_menu, write_my_menu, name, new_menu);
      ctx.fb.say("done.");
      return typeof cb === "function" ? cb('stop') : void 0;
    };
    _do_expire_menu = function(name) {
      ctx.fb.say("Cleaning menu item " + item_to_clean);
      clean_menu(read_my_menu, write_my_menu, name);
      ctx.fb.say("done.");
      return typeof cb === "function" ? cb('stop') : void 0;
    };
    _do_show_menu = function(name) {
      var my_menu;
      my_menu = read_my_menu();
      if (my_menu[name]) {
        ctx.fb.say("Ingredients of the menu '" + name + "':");
        ctx.fb.say("\n", my_menu[name]);
        return typeof cb === "function" ? cb('stop') : void 0;
      } else {
        ctx.fb.shout("Sorry, we don't have a dish `" + name + "` right now :-(");
        return typeof cb === "function" ? cb('stop') : void 0;
      }
    };
    _do_serve_menu = function(name) {
      var my_menu;
      my_menu = read_my_menu();
      if (my_menu[name]) {
        return cook_menu(ctx, my_menu[name], cb);
      } else {
        ctx.fb.shout("Sorry, we don't have a dish `" + name + "` right now :-(");
        return typeof cb === "function" ? cb('stop') : void 0;
      }
    };
    _do_just_tea = function(name) {
      var my_menu;
      my_menu = read_my_menu();
      if (my_menu[name]) {
        return cook_tea(ctx, my_menu[name], cb);
      } else {
        ctx.fb.shout("Sorry, we don't have a tea sort `" + name + "` right now :-(");
        return typeof cb === "function" ? cb('stop') : void 0;
      }
    };
    _do_help = function() {
      ctx.fb.murmur('help');
      return ctx.print_help();
    };
    _do_default = function() {
      var k, menu;
      menu = read_my_menu();
      if (Object.keys(menu).length > 0) {
        ctx.fb.say("Menu:");
        for (k in read_my_menu()) {
          ctx.fb.say("- " + k);
        }
      } else {
        ctx.fb.shout("We have nothing to offer right now :-(");
      }
      return typeof cb === "function" ? cb('stop') : void 0;
    };
    _ref4 = Object.keys(ctx.full_args).filter(function(i) {
      return i !== 'global' && i !== 'menu';
    }), arg1 = _ref4[0], arg2 = _ref4[1];
    if (ctx.own_args["new"]) {
      return _do_new_menu(ctx.own_args["new"]);
    } else if ((ctx.own_args.hasOwnProperty('expire')) && arg1) {
      return _do_expire_menu(arg1);
    } else if ((ctx.own_args.hasOwnProperty('show')) && arg1) {
      return _do_show_menu(arg1);
    } else if ((ctx.own_args.hasOwnProperty('justatea')) && arg1) {
      return _do_just_tea(arg1);
    } else if (ctx.own_args.hasOwnProperty('help')) {
      return _do_help();
    } else if (arg1) {
      return _do_serve_menu(arg1);
    } else {
      return _do_default();
    }
  };

  module.exports = make_target("menu", waiter, help);

}).call(this);
