// Generated by CoffeeScript 1.3.3
(function() {
  var camelize, expandPath, filter_dict, fs, help, make_app, make_controller, make_model, make_module, make_skelethon, make_target, maker, path, say, scream, shout, whisper, _ref, _ref1;

  help = ["Creates a skeleton for a new module in the current working directory.\n\nParameters:\n    app <app_name>     - create a new app with the name 'app_name'\n    controller <name>  - create a new controller\n    model <name>       - create a new model"];

  path = require('path');

  fs = require('fs');

  make_target = require('../lib/target').make_target;

  _ref = require('../lib/utils'), camelize = _ref.camelize, expandPath = _ref.expandPath, filter_dict = _ref.filter_dict;

  _ref1 = require('../lib/logger')("Make>"), say = _ref1.say, shout = _ref1.shout, scream = _ref1.scream, whisper = _ref1.whisper;

  make_skelethon = require('../lib/skelethon/skelethon').make_skelethon;

  make_app = function(name, ctx) {
    var replace_file_names_map, template, values, _path;
    if (!name) {
      throw "Bad name `" + name + "`";
    }
    template = __dirname + "/../../assets/templates/app";
    values = {
      name: name
    };
    _path = path.normalize(name);
    if (fs.existsSync(_path)) {
      throw _path + " already exists";
    }
    fs.mkdirSync(_path, 0x1fd);
    replace_file_names_map = {
      "index.coffee": "" + name + ".coffee",
      "index_tests.coffee": "" + name + "Tests.coffee"
    };
    return make_skelethon({
      skelethon_path: template,
      result_path: _path,
      values: values,
      replace_map: replace_file_names_map,
      fb: ctx.fb
    });
  };

  make_controller = function(name, ctx) {
    var c_path, template, values;
    if (!name) {
      throw "Bad name `" + name + "`";
    }
    template = __dirname + "/../../assets/templates/controller.coffee";
    values = {
      name: camelize(path.basename(name))
    };
    c_path = expandPath(name, "./app/controllers/") + ".coffee";
    return make_skelethon({
      skelethon_path: template,
      result_path: c_path,
      values: values,
      fb: ctx.fb
    });
  };

  make_model = function(name, ctx) {
    var c_path, template, values;
    if (!name) {
      throw "Bad name `" + name + "`";
    }
    template = __dirname + "/../../assets/templates/model.coffee";
    values = {
      name: camelize(path.basename(name))
    };
    c_path = expandPath(name, "./app/models/") + ".coffee";
    return make_skelethon({
      skelethon_path: template,
      result_path: c_path,
      values: values,
      fb: ctx.fb
    });
  };

  make_module = function(name, ctx) {
    var replace_file_names_map, template, values, _path;
    if (!name) {
      throw "Need module name";
    }
    template = __dirname + "/../../assets/templates/module";
    values = {
      name: name
    };
    _path = path.normalize(name);
    if (fs.existsSync(_path)) {
      throw _path + " already exists";
    }
    fs.mkdirSync(_path, 0x1fd);
    replace_file_names_map = {
      "module.coffee": "" + name + ".coffee"
    };
    return make_skelethon({
      skelethon_path: template,
      result_path: _path,
      values: values,
      replace_map: replace_file_names_map,
      fb: ctx.fb
    });
  };

  maker = function(ctx, cb) {
    var args;
    args = Object.keys(ctx.full_args).filter(function(k) {
      return k !== 'make' && k !== 'global';
    });
    try {
      switch (args[0]) {
        case "app":
          make_app(args[1], ctx);
          break;
        case "controller":
          make_controller(args[1], ctx);
          break;
        case "model":
          make_model(args[1], ctx);
          break;
        case "module":
          make_module(args[1], ctx);
          break;
        default:
          ctx.print_help();
      }
    } catch (e) {
      ctx.fb.scream("Exception raised while making " + args[0] + ": " + e);
      scream("Exception raised while making " + args[0] + ": " + e);
      whisper("" + e.stack);
      if (typeof cb === "function") {
        cb('target_error');
      }
    }
    return typeof cb === "function" ? cb('stop') : void 0;
  };

  module.exports = make_target("make", maker, help, true);

}).call(this);
