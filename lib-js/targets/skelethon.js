// Generated by CoffeeScript 1.4.0
(function() {
  var SKELETHON_ASSETS_PATH, get_adaptors, help, list, make_skelethon, make_target, path, skelethon, u,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  help = ["==================================================================\nThis command is used for creating init module structure.\nThe logic of skelethon creation is defined by appropriate adaptor.\n=================================================================="];

  make_target = require('../lib/target').make_target;

  make_skelethon = require('../lib/skelethon/skelethon').make_skelethon;

  SKELETHON_ASSETS_PATH = require('../defs').SKELETHON_ASSETS_PATH;

  get_adaptors = require('../lib/adaptor');

  u = require('underscore');

  path = require('path');

  list = function(ctx, cb) {
    var k, records, skels, v;
    skels = get_adaptors().map(function(a) {
      return typeof a.make_skelethon === "function" ? a.make_skelethon() : void 0;
    }).filter(function(a) {
      return a != null;
    }).reduce(function(a, b) {
      return u.extend(a, b);
    });
    records = ((function() {
      var _results;
      _results = [];
      for (k in skels) {
        v = skels[k];
        _results.push(k);
      }
      return _results;
    })()).map(function(k) {
      return "  -" + k;
    }).join("  \r\n");
    ctx.fb.say("List of available skelethons: \r\n" + records + " \r\n");
    return cb('stop');
  };

  skelethon = function(ctx, cb) {
    var args, skel_func, skel_values, skels;
    args = Object.keys(ctx.full_args).filter(function(k) {
      return k !== 'skelethon' && k !== 'global';
    });
    if (__indexOf.call(args, 'list') >= 0) {
      list(ctx, cb);
    }
    skels = get_adaptors().map(function(a) {
      return typeof a.make_skelethon === "function" ? a.make_skelethon() : void 0;
    }).filter(function(a) {
      return a != null;
    }).reduce(function(a, b) {
      return u.extend(a, b);
    });
    if (args[0] in skels) {
      skel_func = skels[args[0]];
      ctx.fb.say("Skelethon for '" + args[0] + "' was found =)");
      skel_values = skel_func(args);
      skel_values.skelethon_path = path.join(path.normalize(SKELETHON_ASSETS_PATH), skel_values.skelethon_path);
      skel_values.fb = ctx.fb;
      console.log(skel_values);
      make_skelethon(skel_values);
    } else {
      ctx.fb.scream("Skelethon for '" + args[0] + "' was not found =(");
    }
    return typeof cb === "function" ? cb('stop') : void 0;
  };

  module.exports = make_target('skelethon', skelethon, help, true);

}).call(this);
