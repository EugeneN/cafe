// Generated by CoffeeScript 1.6.1
(function() {
  var DEFAULT_APP_ROOT, DEFAULT_BUILD_ROOT, app_init, async, exists, fs, help, is_dir, is_file, make_skelethon, make_target, menu, mkdirp, path, recipe_etalon_path, _ref;

  help = ["Initializes new client side application skelethon.\n\nParameters:\n  - app_root - [optional, default - 'cs'] - client side application root (where your modules will be stored).\n                Will be created if not exists, or just add recipe json to existing \n                folder.\n\n  - build_root - [optional, default - 'public'] - \n                  folder for storing processed js bundles. Will be created if not exists.\n\nCreates menu file with commands:\n  - build   - simple application build\n  - fbuild  - force build\n  - wbuild  - build and watch application files.\n"];

  fs = require('fs');

  path = require('path');

  _ref = require('../lib/utils'), is_dir = _ref.is_dir, is_file = _ref.is_file, exists = _ref.exists;

  recipe_etalon_path = path.resolve(__dirname, '../../assets/templates/init/recipe/recipe.json');

  make_target = require('../lib/target').make_target;

  make_skelethon = require('../lib/skelethon/skelethon').make_skelethon;

  menu = require('../lib/menu');

  mkdirp = require('mkdirp');

  async = require('async');

  DEFAULT_APP_ROOT = 'cs';

  DEFAULT_BUILD_ROOT = 'public';

  app_init = function(ctx, cb) {
    var app_root, build_root, create_app_root, create_build_root, create_menu_file, _ref1;
    ctx.fb.say('Initializing new client side app');
    _ref1 = ctx.own_args, app_root = _ref1.app_root, build_root = _ref1.build_root;
    app_root || (app_root = DEFAULT_APP_ROOT);
    build_root || (build_root = DEFAULT_BUILD_ROOT);
    create_app_root = function(cb) {
      if (!exists(app_root)) {
        return mkdirp(app_root, function(err) {
          ctx.fb.say("Created app_root - " + app_root + ".");
          return cb();
        });
      } else {
        ctx.fb.shout("app_root " + app_root + " exists. Skip creating");
        return cb();
      }
    };
    create_build_root = function(cb) {
      var create_recipe_json;
      create_recipe_json = function() {
        var recipe;
        recipe = fs.readFileSync(recipe_etalon_path);
        fs.writeFileSync(path.join(app_root, 'recipe.json'), recipe);
        ctx.fb.say("" + app_root + "/recipe.json file created");
        return cb();
      };
      if (!exists(build_root)) {
        return mkdirp(build_root, function(err) {
          ctx.fb.say("Created build_root - " + build_root + ".");
          return create_recipe_json();
        });
      } else {
        ctx.fb.shout("build_root " + build_root + " exists. Skip creating");
        return create_recipe_json();
      }
    };
    create_menu_file = function(cb) {
      var build, fbuild, wbuild;
      build = {
        build: {
          app_root: app_root,
          build_root: build_root,
          formula: 'recipe.json'
        }
      };
      fbuild = {
        build: {
          app_root: app_root,
          build_root: build_root,
          formula: 'recipe.json',
          f: true
        }
      };
      wbuild = {
        build: {
          app_root: app_root,
          build_root: build_root,
          formula: 'recipe.json'
        },
        watch: {
          src: app_root
        }
      };
      menu._do_new_menu('build', {
        full_args: build,
        fb: ctx.fb
      });
      menu._do_new_menu('fbuild', {
        full_args: fbuild,
        fb: ctx.fb
      });
      menu._do_new_menu('wbuild', {
        full_args: wbuild,
        fb: ctx.fb
      });
      return cb();
    };
    return async.parallel([create_app_root, create_build_root, create_menu_file], function(err, results) {
      return cb('stop');
    });
  };

  module.exports = make_target("init", app_init, help);

}).call(this);
